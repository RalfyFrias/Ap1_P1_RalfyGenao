@page "/Articulos/Create"
@using Ap1_P1_RalfyGenao.Models
@using Ap1_P1_RalfyGenao.Services
@inject ArticulosServices articulosServices
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Registro de Artículos</PageTitle>
<EditForm Model="Articulo" OnValidSubmit="Guardar" OnFieldChanged="OnFieldChanged">
    <DataAnnotationsValidator />

    <Toasts class="p-3" Messages="MensajeToast" Placement="ToastsPlacement.TopRight" />

    <div style="width: 100%; text-align: right;">
        <button class="btn btn-outline-secondary" @onclick="Retroceder"><Icon Name="IconName.Arrow90DegLeft" /> Volver</button>
    </div>

    <div class="card">
        <div class="card-header text-center py-2 rounded">
            <h3> <i class="fas fa-clipboard-list"></i> Registro de Artículos</h3>
        </div>

        <div class="card-body">
            <!-- ArticuloId -->
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="ArticuloId" class="form-label">ArticuloId:</label>
                    <div class="input-group">
                        <InputNumber @bind-Value="Articulo.ArticuloId" class="form-control" style="font-size: 0.8em;" aria-describedby="BotonBuscar" />
                        <ValidationMessage For="@(() => Articulo.ArticuloId)" />
                    </div>
                </div>
            </div>

            <!-- Fecha -->
            <div class="mb-3">
                <label for="Fecha" class="form-label">Fecha:</label>
                <InputDate @bind-Value="Articulo.Fecha" class="form-control" />
                <ValidationMessage For="@(() => Articulo.Fecha)" />
                @if (Existe)
                {
                    <span class="text-danger">Ya existe un artículo con esta fecha.</span>
                }
            </div>

            <!-- Descripcion -->
            <div class="mb-3">
                <label for="Descripcion" class="form-label">Descripcion:</label>
                <InputText @bind-Value="Articulo.Descripcion" class="form-control" />
                <ValidationMessage For="@(() => Articulo.Descripcion)" />
            </div>

            <!-- Monto -->
            <div class="mb-3">
                <label for="Monto" class="form-label">Monto:</label>
                <InputNumber @bind-Value="Articulo.Monto" class="form-control" />
                <ValidationMessage For="@(() => Articulo.Monto)" />
            </div>

            <!-- Ganancia -->
            <div class="mb-3">
                <label for="Ganancia" class="form-label">Ganancia:</label>
                <InputNumber @bind-Value="Articulo.Ganancia" class="form-control" />
                <ValidationMessage For="@(() => Articulo.Ganancia)" />
            </div>

            <!-- Precio -->
            <div class="mb-3">
                <label for="Precio" class="form-label">Precio:</label>
                <InputNumber @bind-Value="Articulo.Precio" class="form-control" />
                <ValidationMessage For="@(() => Articulo.Precio)" />
            </div>
        </div>

        <div class="card-footer bg-light d-flex justify-content-center mt-3">
            <div class="btn-group">
                <button class="btn btn-outline-primary" @onclick="Guardar"><Icon Name="IconName.Floppy" /> Guardar</button>
                <button class="btn btn-outline-primary" @onclick="Eliminar"><Icon Name="IconName.Trash" /> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ArticuloId { get; set; }
    private Articulos Articulo = new Articulos();
    private bool Existe = false;

    List<ToastMessage> MensajeToast = new List<ToastMessage>();

    public async Task Nuevo()
    {
        Articulo = new Articulos();
        Existe = false;
    }

    public async Task Buscar()
    {
        Existe = false;
        var ArticuloEncontrado = await articulosServices.Buscar(Articulo.ArticuloId);

        if (ArticuloEncontrado != null)
        {
            Articulo = ArticuloEncontrado;
        }
        else
        {
            await Nuevo();
        }
    }

    public async Task Guardar()
    {
        if (await Validar())
        {
            return;
        }

        var guardo = await articulosServices.Guardar(Articulo);
        if (guardo)
        {
            Mensaje(ToastType.Success, "Guardado correctamente el artículo.");
            await Nuevo();
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await articulosServices.Eliminar(Articulo.ArticuloId);
        await Nuevo();
        Mensaje(ToastType.Success, "Eliminado correctamente el artículo.");
    }

    public async Task Retroceder()
    {
        NavigationManager.NavigateTo("/Articulos/index");
    }

    public async Task<bool> Validar()
    {
        var listaArticulos = await articulosServices.Listar(a => a.Descripcion.ToLower() == Articulo.Descripcion.ToLower() && a.ArticuloId != Articulo.ArticuloId);
        Existe = listaArticulos.Any();
        return Existe;
    }

    private void OnFieldChanged(EditContext editContext, FieldChangedEventArgs args)
    {
        if (args.FieldIdentifier.FieldName == nameof(Articulo.Monto))
        {
            CalcularGanancia();
        }
    }

    public void CalcularGanancia()
    {
        if (Articulo.Monto > 0)
        {
            var gananciaDeseada = (int)(Articulo.Monto * 0.15m);
            Articulo.Precio = Articulo.Monto + gananciaDeseada;
            Articulo.Ganancia = gananciaDeseada;
        }
        else
        {
            Mensaje(ToastType.Warning, "El monto debe ser mayor que cero.");
        }
    }

    private ToastMessage CreateToastMessage(ToastType toastType, string mensaje)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Notificación",
            HelpText = $"{DateTime.Now}",
            Message = mensaje,
        };

    private void Mensaje(ToastType toastType, string mensaje)
    {
        MensajeToast.Add(CreateToastMessage(toastType, mensaje));
    }
}
